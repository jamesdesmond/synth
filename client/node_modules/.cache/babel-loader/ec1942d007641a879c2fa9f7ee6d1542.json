{"ast":null,"code":"import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) => {\n  return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      try {\n        const nativeAudioWorkletNode = createNativeAudioNode(nativeContext, ntvCntxt => {\n          return new nativeAudioWorkletNodeConstructor(ntvCntxt, name, options);\n        });\n        const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n\n        let onprocessorerror = null;\n        Object.defineProperties(nativeAudioWorkletNode, {\n          /*\n           * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n           * browsers have no native implementation to achieve a consistent behavior.\n           */\n          channelCount: {\n            get: () => options.channelCount,\n            set: () => {\n              throw createInvalidStateError();\n            }\n          },\n          channelCountMode: {\n            get: () => 'explicit',\n            set: () => {\n              throw createInvalidStateError();\n            }\n          },\n          // Bug #156: Chrome & Opera do not yet fire an ErrorEvent.\n          onprocessorerror: {\n            get: () => onprocessorerror,\n            set: value => {\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n              }\n\n              onprocessorerror = typeof value === 'function' ? value : null;\n\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n              }\n            }\n          }\n        });\n\n        nativeAudioWorkletNode.addEventListener = (addEventListener => {\n          return (...args) => {\n            if (args[0] === 'processorerror') {\n              const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n\n              if (unpatchedEventListener !== null) {\n                const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                if (patchedEventListener !== undefined) {\n                  args[1] = patchedEventListener;\n                } else {\n                  args[1] = event => {\n                    unpatchedEventListener(new ErrorEvent(args[0], { ...event,\n                      error: new Error()\n                    }));\n                  };\n\n                  patchedEventListeners.set(unpatchedEventListener, args[1]);\n                }\n              }\n            }\n\n            return addEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n          };\n        })(nativeAudioWorkletNode.addEventListener);\n\n        nativeAudioWorkletNode.removeEventListener = (removeEventListener => {\n          return (...args) => {\n            if (args[0] === 'processorerror') {\n              const patchedEventListener = patchedEventListeners.get(args[1]);\n\n              if (patchedEventListener !== undefined) {\n                patchedEventListeners.delete(args[1]);\n                args[1] = patchedEventListener;\n              }\n            }\n\n            return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n          };\n        })(nativeAudioWorkletNode.removeEventListener);\n        /*\n         * Bug #86: Chrome & Opera do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but has\n         * an output.\n         */\n\n\n        if (options.numberOfOutputs !== 0) {\n          const nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n          });\n          nativeAudioWorkletNode.connect(nativeGainNode)\n          /*\n           * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is\n           * used here to make sure to connect the right destination.\n           */\n          .connect(nativeGainNode.context.destination);\n\n          const whenConnected = () => nativeGainNode.disconnect();\n          /*\n           * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is\n           * used here to make sure to connect the right destination.\n           */\n\n\n          const whenDisconnected = () => nativeGainNode.connect(nativeGainNode.context.destination); // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n\n\n          return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n        }\n\n        return nativeAudioWorkletNode;\n      } catch (err) {\n        // Bug #60: Chrome & Opera throw an InvalidStateError instead of a NotSupportedError.\n        if (err.code === 11) {\n          throw createNotSupportedError();\n        }\n\n        throw err;\n      }\n    } // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n\n\n    if (processorConstructor === undefined) {\n      throw createNotSupportedError();\n    }\n\n    testClonabilityOfAudioWorkletNodeOptions(options);\n    return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n  };\n};","map":{"version":3,"sources":["/Users/jamescoyne/Desktop/synth-master/client/node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js"],"names":["testClonabilityOfAudioWorkletNodeOptions","createNativeAudioWorkletNodeFactory","createInvalidStateError","createNativeAudioNode","createNativeAudioWorkletNodeFaker","createNativeGainNode","createNotSupportedError","monitorConnections","nativeContext","baseLatency","nativeAudioWorkletNodeConstructor","name","processorConstructor","options","nativeAudioWorkletNode","ntvCntxt","patchedEventListeners","Map","onprocessorerror","Object","defineProperties","channelCount","get","set","channelCountMode","value","removeEventListener","addEventListener","args","unpatchedEventListener","handleEvent","patchedEventListener","undefined","event","ErrorEvent","error","Error","call","delete","numberOfOutputs","nativeGainNode","channelInterpretation","gain","connect","context","destination","whenConnected","disconnect","whenDisconnected","err","code"],"mappings":"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","sourcesContent":["import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) => {\n    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            try {\n                const nativeAudioWorkletNode = createNativeAudioNode(nativeContext, (ntvCntxt) => {\n                    return new nativeAudioWorkletNodeConstructor(ntvCntxt, name, options);\n                });\n                const patchedEventListeners = new Map(); // tslint:disable-line:max-line-length\n                let onprocessorerror = null;\n                Object.defineProperties(nativeAudioWorkletNode, {\n                    /*\n                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n                     * browsers have no native implementation to achieve a consistent behavior.\n                     */\n                    channelCount: {\n                        get: () => options.channelCount,\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    channelCountMode: {\n                        get: () => 'explicit',\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    // Bug #156: Chrome & Opera do not yet fire an ErrorEvent.\n                    onprocessorerror: {\n                        get: () => onprocessorerror,\n                        set: (value) => {\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n                            }\n                            onprocessorerror = (typeof value === 'function') ? value : null;\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n                            }\n                        }\n                    }\n                });\n                nativeAudioWorkletNode.addEventListener = ((addEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const unpatchedEventListener = (typeof args[1] === 'function')\n                                ? args[1]\n                                : (typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function')\n                                    ? args[1].handleEvent\n                                    : null;\n                            if (unpatchedEventListener !== null) {\n                                const patchedEventListener = patchedEventListeners.get(args[1]);\n                                if (patchedEventListener !== undefined) {\n                                    args[1] = patchedEventListener;\n                                }\n                                else {\n                                    args[1] = (event) => {\n                                        unpatchedEventListener(new ErrorEvent(args[0], { ...event, error: new Error( /* @todo */) }));\n                                    };\n                                    patchedEventListeners.set(unpatchedEventListener, args[1]);\n                                }\n                            }\n                        }\n                        return addEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.addEventListener);\n                nativeAudioWorkletNode.removeEventListener = ((removeEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const patchedEventListener = patchedEventListeners.get(args[1]);\n                            if (patchedEventListener !== undefined) {\n                                patchedEventListeners.delete(args[1]);\n                                args[1] = patchedEventListener;\n                            }\n                        }\n                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.removeEventListener);\n                /*\n                 * Bug #86: Chrome & Opera do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but has\n                 * an output.\n                 */\n                if (options.numberOfOutputs !== 0) {\n                    const nativeGainNode = createNativeGainNode(nativeContext, { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete', gain: 0 });\n                    nativeAudioWorkletNode\n                        .connect(nativeGainNode)\n                        /*\n                         * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is\n                         * used here to make sure to connect the right destination.\n                         */\n                        .connect(nativeGainNode.context.destination);\n                    const whenConnected = () => nativeGainNode.disconnect();\n                    /*\n                     * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is\n                     * used here to make sure to connect the right destination.\n                     */\n                    const whenDisconnected = () => nativeGainNode.connect(nativeGainNode.context.destination);\n                    // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n                    return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n                }\n                return nativeAudioWorkletNode;\n            }\n            catch (err) {\n                // Bug #60: Chrome & Opera throw an InvalidStateError instead of a NotSupportedError.\n                if (err.code === 11) {\n                    throw createNotSupportedError();\n                }\n                throw err;\n            }\n        }\n        // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n        if (processorConstructor === undefined) {\n            throw createNotSupportedError();\n        }\n        testClonabilityOfAudioWorkletNodeOptions(options);\n        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-audio-worklet-node-factory.js.map"]},"metadata":{},"sourceType":"module"}