{"ast":null,"code":"import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n  return (nativeContext, options) => {\n    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());\n    assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate'); // Bug #71: Edge does not allow to set the buffer to null.\n\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer'); // Bug #149: Safari does not yet support the detune AudioParam.\n\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart'); // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n    } // Bug #92: Chrome & Edge do not respect the duration parameter yet.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {\n      wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n    } // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #44: Only Firefox does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n    } // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n\n\n    addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n    return nativeAudioBufferSourceNode;\n  };\n};","map":{"version":3,"sources":["/Users/jamescoyne/Desktop/synth-master/client/node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js"],"names":["assignNativeAudioNodeAudioParamValue","assignNativeAudioNodeOption","assignNativeAudioNodeOptions","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","wrapAudioBufferSourceNodeStartMethodDurationParameter","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","createNativeAudioBufferSourceNodeFactory","addSilentConnection","cacheTestResult","createNativeAudioNode","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodDurationParameterSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioBufferSourceNodeStopMethodNullifiedBufferSupport","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioBufferSourceNodeStartMethodOffsetClampling","wrapAudioBufferSourceNodeStopMethodNullifiedBuffer","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","nativeContext","options","nativeAudioBufferSourceNode","ntvCntxt","createBufferSource"],"mappings":"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","sourcesContent":["import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n        // Bug #71: Edge does not allow to set the buffer to null.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n        }\n        // Bug #92: Chrome & Edge do not respect the duration parameter yet.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {\n            wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n        }\n        // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n        if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n        addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n        return nativeAudioBufferSourceNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-audio-buffer-source-node-factory.js.map"]},"metadata":{},"sourceType":"module"}