{"ast":null,"code":"import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupNativeContext } from './factories/get-backup-native-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioNodeFactory } from './factories/native-audio-node-factory';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNodeFactory } from './factories/native-biquad-filter-node-factory';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNodeFactory } from './factories/native-channel-splitter-node-factory';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeConvolverNodeFakerFactory } from './factories/native-convolver-node-faker-factory';\nimport { createNativeDelayNodeFactory } from './factories/native-delay-node-factory';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNodeFactory } from './factories/native-gain-node-factory';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNodeFactory } from './factories/native-media-element-audio-source-node-factory';\nimport { createNativeMediaStreamAudioDestinationNodeFactory } from './factories/native-media-stream-audio-destination-node-factory';\nimport { createNativeMediaStreamAudioSourceNodeFactory } from './factories/native-media-stream-audio-source-node-factory';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNodeFactory } from './factories/native-script-processor-node-factory';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './factories/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { createTestAudioBufferSourceNodeStartMethodDurationParameterSupport } from './factories/test-audio-buffer-source-node-start-method-duration-parameter-support';\nimport { createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './factories/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\n\nexport * from './interfaces/index';\nexport * from './types/index';\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst getBackupNativeContext = createGetBackupNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);\nconst createNativeAudioNode = createNativeAudioNodeFactory(getBackupNativeContext);\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst auxiliaryGainNodeStore = new WeakMap();\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst createNativeGainNode = createNativeGainNodeFactory(createNativeAudioNode);\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport(createNativeAudioNode);\nconst wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(createNativeAudioNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStartMethodDurationParameterSupport(nativeOfflineAudioContextConstructor), createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createNativeBiquadFilterNode = createNativeBiquadFilterNodeFactory(createNativeAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(createNativeAudioNode, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeChannelSplitterNode = createNativeChannelSplitterNodeFactory(createNativeAudioNode);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNodeFaker = createNativeConvolverNodeFakerFactory(createNativeAudioNode, createNativeGainNode, monitorConnections);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDelayNode = createNativeDelayNodeFactory(createNativeAudioNode);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeScriptProcessorNode = createNativeScriptProcessorNodeFactory(createNativeAudioNode);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeAudioNode, createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativeAudioNode, createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(getBackupNativeContext);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet());\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window); // The addAudioWorkletModule() function is only available in a SecureContext.\n\nexport const addAudioWorkletModule = isSecureContext ? createAddAudioWorkletModule(createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getBackupNativeContext, getNativeContext, new WeakMap(), new WeakMap(), // @todo window is guaranteed to be defined because isSecureContext checks that as well.\nwindow) : undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext); // The AudioWorkletNode constructor is only available in a SecureContext.\n\nconst audioWorkletNodeConstructor = isSecureContext ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, wrapEventListener) : undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);","map":{"version":3,"sources":["/Users/jamescoyne/Desktop/synth-master/client/node_modules/standardized-audio-context/build/es2019/module.js"],"names":["createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","createSetValueAutomationEvent","createSetValueCurveAutomationEvent","createAbortError","createAddAudioNodeConnections","createAddAudioParamConnections","createAddAudioWorkletModule","createAddSilentConnection","createAddUnrenderedAudioWorkletNode","createAnalyserNodeConstructor","createAnalyserNodeRendererFactory","createAudioBufferConstructor","createAudioBufferSourceNodeConstructor","createAudioBufferSourceNodeRendererFactory","createAudioContextConstructor","createAudioDestinationNodeConstructor","createAudioDestinationNodeRenderer","createAudioListenerFactory","createAudioNodeConstructor","createAudioParamFactory","createAudioParamRenderer","createAudioWorkletNodeConstructor","createAudioWorkletNodeRendererFactory","createBaseAudioContextConstructor","createBiquadFilterNodeConstructor","createBiquadFilterNodeRendererFactory","createCacheTestResult","createChannelMergerNodeConstructor","createChannelMergerNodeRendererFactory","createChannelSplitterNodeConstructor","createChannelSplitterNodeRendererFactory","createConnectAudioParam","createConnectMultipleOutputs","createConnectedNativeAudioBufferSourceNodeFactory","createConstantSourceNodeConstructor","createConstantSourceNodeRendererFactory","createConvertNumberToUnsignedLong","createConvolverNodeConstructor","createConvolverNodeRendererFactory","createCreateNativeOfflineAudioContext","createDataCloneError","createDecodeAudioData","createDecrementCycleCounter","createDelayNodeConstructor","createDelayNodeRendererFactory","createDeleteUnrenderedAudioWorkletNode","createDetectCycles","createDisconnectMultipleOutputs","createDynamicsCompressorNodeConstructor","createDynamicsCompressorNodeRendererFactory","createEncodingError","createEvaluateSource","createEventTargetConstructor","createExposeCurrentFrameAndCurrentTime","createFetchSource","createGainNodeConstructor","createGainNodeRendererFactory","createGetAudioNodeRenderer","createGetAudioParamRenderer","createGetBackupNativeContext","createGetNativeContext","createGetUnrenderedAudioWorkletNodes","createIIRFilterNodeConstructor","createIIRFilterNodeRendererFactory","createIncrementCycleCounterFactory","createIndexSizeError","createInvalidAccessError","createInvalidStateError","createIsAnyAudioContext","createIsAnyAudioNode","createIsAnyAudioParam","createIsAnyOfflineAudioContext","createIsNativeAudioContext","createIsNativeAudioNode","createIsNativeAudioParam","createIsNativeContext","createIsNativeOfflineAudioContext","createIsSecureContext","createIsSupportedPromise","createMediaElementAudioSourceNodeConstructor","createMediaStreamAudioDestinationNodeConstructor","createMediaStreamAudioSourceNodeConstructor","createMediaStreamTrackAudioSourceNodeConstructor","createMinimalAudioContextConstructor","createMinimalBaseAudioContextConstructor","createMinimalOfflineAudioContextConstructor","createMonitorConnections","createNativeAnalyserNodeFactory","createNativeAudioBufferConstructor","createNativeAudioBufferSourceNodeFactory","createNativeAudioContextConstructor","createNativeAudioDestinationNodeFactory","createNativeAudioNodeFactory","createNativeAudioWorkletNodeConstructor","createNativeAudioWorkletNodeFactory","createNativeAudioWorkletNodeFakerFactory","createNativeBiquadFilterNodeFactory","createNativeChannelMergerNodeFactory","createNativeChannelSplitterNodeFactory","createNativeConstantSourceNodeFactory","createNativeConstantSourceNodeFakerFactory","createNativeConvolverNodeFactory","createNativeConvolverNodeFakerFactory","createNativeDelayNodeFactory","createNativeDynamicsCompressorNodeFactory","createNativeGainNodeFactory","createNativeIIRFilterNodeFactory","createNativeIIRFilterNodeFakerFactory","createNativeMediaElementAudioSourceNodeFactory","createNativeMediaStreamAudioDestinationNodeFactory","createNativeMediaStreamAudioSourceNodeFactory","createNativeMediaStreamTrackAudioSourceNodeFactory","createNativeOfflineAudioContextConstructor","createNativeOscillatorNodeFactory","createNativePannerNodeFactory","createNativePannerNodeFakerFactory","createNativePeriodicWaveFactory","createNativeScriptProcessorNodeFactory","createNativeStereoPannerNodeFactory","createNativeStereoPannerNodeFakerFactory","createNativeWaveShaperNodeFactory","createNativeWaveShaperNodeFakerFactory","createNotSupportedError","createOfflineAudioContextConstructor","createOscillatorNodeConstructor","createOscillatorNodeRendererFactory","createPannerNodeConstructor","createPannerNodeRendererFactory","createPeriodicWaveConstructor","createRenderAutomation","createRenderInputsOfAudioNode","createRenderInputsOfAudioParam","createRenderNativeOfflineAudioContext","createStartRendering","createStereoPannerNodeConstructor","createStereoPannerNodeRendererFactory","createTestAudioBufferConstructorSupport","createTestAudioBufferCopyChannelMethodsSubarraySupport","createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","createTestAudioBufferSourceNodeStartMethodDurationParameterSupport","createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport","createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport","createTestAudioContextCloseMethodSupport","createTestAudioContextDecodeAudioDataMethodTypeErrorSupport","createTestAudioContextOptionsSupport","createTestAudioNodeConnectMethodSupport","createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport","createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport","createTestAudioWorkletProcessorNoOutputsSupport","createTestChannelMergerNodeChannelCountSupport","createTestConstantSourceNodeAccurateSchedulingSupport","createTestConvolverNodeBufferReassignabilitySupport","createTestIsSecureContextSupport","createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","createTestOfflineAudioContextCurrentTimeSupport","createTestStereoPannerNodeDefaultValueSupport","createUnknownError","createWaveShaperNodeConstructor","createWaveShaperNodeRendererFactory","createWindow","createWrapAudioBufferCopyChannelMethods","createWrapAudioBufferCopyChannelMethodsOutOfBounds","createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer","createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","createWrapChannelMergerNode","AUDIO_NODE_CONNECTIONS_STORE","AUDIO_NODE_STORE","AUDIO_PARAM_CONNECTIONS_STORE","AUDIO_PARAM_STORE","CONTEXT_STORE","CYCLE_COUNTERS","connectNativeAudioNodeToNativeAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getAudioParamConnections","getNativeAudioNode","getNativeAudioParam","getValueForKey","insertElementInSet","isActiveAudioNode","isDCCurve","isPartOfACycle","overwriteAccessors","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testPromiseSupport","testTransferablesSupport","wrapAudioBufferSourceNodeStartMethodOffsetClamping","wrapEventListener","cacheTestResult","Map","WeakMap","window","nativeOfflineAudioContextConstructor","isNativeOfflineAudioContext","nativeAudioContextConstructor","getBackupNativeContext","createNativeAudioNode","createNativeAnalyserNode","getAudioNodeRenderer","renderInputsOfAudioNode","createAnalyserNodeRenderer","auxiliaryGainNodeStore","getNativeContext","audioParamAudioNodeStore","eventTargetConstructor","isNativeAudioContext","isNativeAudioNode","isNativeAudioParam","audioNodeConstructor","analyserNodeConstructor","AnalyserNode","audioBufferStore","WeakSet","nativeAudioBufferConstructor","convertNumberToUnsignedLong","Uint32Array","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","audioBufferConstructor","AudioBuffer","createNativeGainNode","addSilentConnection","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","renderInputsOfAudioParam","connectAudioParam","createNativeAudioBufferSourceNode","renderAutomation","createAudioBufferSourceNodeRenderer","createAudioParam","audioBufferSourceNodeConstructor","AudioBufferSourceNode","audioDestinationNodeConstructor","createNativeBiquadFilterNode","createBiquadFilterNodeRenderer","biquadFilterNodeConstructor","monitorConnections","wrapChannelMergerNode","createNativeChannelMergerNode","createChannelMergerNodeRenderer","channelMergerNodeConstructor","createNativeChannelSplitterNode","createChannelSplitterNodeRenderer","channelSplitterNodeConstructor","createNativeConstantSourceNodeFaker","createNativeConstantSourceNode","createConstantSourceNodeRenderer","constantSourceNodeConstructor","createNativeConvolverNodeFaker","createNativeConvolverNode","createConvolverNodeRenderer","convolverNodeConstructor","createNativeDelayNode","createDelayNodeRenderer","delayNodeConstructor","createNativeDynamicsCompressorNode","createDynamicsCompressorNodeRenderer","dynamicsCompressorNodeConstructor","createGainNodeRenderer","gainNodeConstructor","createNativeScriptProcessorNode","createNativeIIRFilterNodeFaker","renderNativeOfflineAudioContext","createIIRFilterNodeRenderer","createNativeIIRFilterNode","iIRFilterNodeConstructor","createAudioListener","unrenderedAudioWorkletNodeStore","minimalBaseAudioContextConstructor","createNativeOscillatorNode","createOscillatorNodeRenderer","oscillatorNodeConstructor","createConnectedNativeAudioBufferSourceNode","createNativeWaveShaperNodeFaker","createNativeWaveShaperNode","createNativePannerNodeFaker","createNativePannerNode","createPannerNodeRenderer","pannerNodeConstructor","createNativePeriodicWave","periodicWaveConstructor","nativeStereoPannerNodeFakerFactory","createNativeStereoPannerNode","createStereoPannerNodeRenderer","stereoPannerNodeConstructor","createWaveShaperNodeRenderer","waveShaperNodeConstructor","isSecureContext","exposeCurrentFrameAndCurrentTime","addAudioWorkletModule","undefined","isNativeContext","decodeAudioData","baseAudioContextConstructor","createNativeMediaElementAudioSourceNode","mediaElementAudioSourceNodeConstructor","createNativeMediaStreamAudioDestinationNode","mediaStreamAudioDestinationNodeConstructor","createNativeMediaStreamAudioSourceNode","mediaStreamAudioSourceNodeConstructor","createNativeMediaStreamTrackAudioSourceNode","mediaStreamTrackAudioSourceNodeConstructor","audioContextConstructor","AudioContext","getUnrenderedAudioWorkletNodes","addUnrenderedAudioWorkletNode","connectMultipleOutputs","deleteUnrenderedAudioWorkletNode","disconnectMultipleOutputs","createNativeAudioWorkletNodeFaker","createNativeAudioWorkletNode","nativeAudioWorkletNodeConstructor","createAudioWorkletNodeRenderer","audioWorkletNodeConstructor","AudioWorkletNode","BiquadFilterNode","ChannelMergerNode","ChannelSplitterNode","ConvolverNode","ConstantSourceNode","DelayNode","DynamicsCompressorNode","GainNode","IIRFilterNode","MediaElementAudioSourceNode","MediaStreamAudioDestinationNode","MediaStreamAudioSourceNode","MediaStreamTrackAudioSourceNode","minimalAudioContextConstructor","MinimalAudioContext","createNativeOfflineAudioContext","startRendering","minimalOfflineAudioContextConstructor","MinimalOfflineAudioContext","offlineAudioContextConstructor","OfflineAudioContext","OscillatorNode","PannerNode","PeriodicWave","StereoPannerNode","WaveShaperNode","isAnyAudioContext","isAnyAudioNode","isAnyAudioParam","isAnyOfflineAudioContext","isSupported"],"mappings":"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","sourcesContent":["import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupNativeContext } from './factories/get-backup-native-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioNodeFactory } from './factories/native-audio-node-factory';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNodeFactory } from './factories/native-biquad-filter-node-factory';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNodeFactory } from './factories/native-channel-splitter-node-factory';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeConvolverNodeFakerFactory } from './factories/native-convolver-node-faker-factory';\nimport { createNativeDelayNodeFactory } from './factories/native-delay-node-factory';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNodeFactory } from './factories/native-gain-node-factory';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNodeFactory } from './factories/native-media-element-audio-source-node-factory';\nimport { createNativeMediaStreamAudioDestinationNodeFactory } from './factories/native-media-stream-audio-destination-node-factory';\nimport { createNativeMediaStreamAudioSourceNodeFactory } from './factories/native-media-stream-audio-source-node-factory';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNodeFactory } from './factories/native-script-processor-node-factory';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './factories/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { createTestAudioBufferSourceNodeStartMethodDurationParameterSupport } from './factories/test-audio-buffer-source-node-start-method-duration-parameter-support';\nimport { createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './factories/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst getBackupNativeContext = createGetBackupNativeContext(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);\nconst createNativeAudioNode = createNativeAudioNodeFactory(getBackupNativeContext);\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError, createNativeAudioNode);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst auxiliaryGainNodeStore = new WeakMap();\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst createNativeGainNode = createNativeGainNodeFactory(createNativeAudioNode);\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(createNativeAudioNode);\nconst testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport(createNativeAudioNode);\nconst wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(createNativeAudioNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStartMethodDurationParameterSupport(nativeOfflineAudioContextConstructor), createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport(createNativeAudioNode), createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createNativeBiquadFilterNode = createNativeBiquadFilterNodeFactory(createNativeAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, createNativeAudioNode, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(createNativeAudioNode, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeChannelSplitterNode = createNativeChannelSplitterNodeFactory(createNativeAudioNode);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNodeFaker = createNativeConvolverNodeFakerFactory(createNativeAudioNode, createNativeGainNode, monitorConnections);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDelayNode = createNativeDelayNodeFactory(createNativeAudioNode);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeScriptProcessorNode = createNativeScriptProcessorNodeFactory(createNativeAudioNode);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeAudioNode, createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativeAudioNode, createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(getBackupNativeContext);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet());\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = (isSecureContext) ?\n    createAddAudioWorkletModule(createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getBackupNativeContext, getNativeContext, new WeakMap(), new WeakMap(), \n    // @todo window is guaranteed to be defined because isSecureContext checks that as well.\n    window) :\n    undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst createNativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNodeFactory(createNativeAudioNode, createNotSupportedError);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNodeFactory(createNativeAudioNode);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, createNativeAudioNode, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = (isSecureContext) ?\n    createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, wrapEventListener) :\n    undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(createNativeAudioNode, nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n//# sourceMappingURL=/build/es2019/module.js.map"]},"metadata":{},"sourceType":"module"}