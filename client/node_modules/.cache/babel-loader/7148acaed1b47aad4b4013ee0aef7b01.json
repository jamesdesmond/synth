{"ast":null,"code":"import range from 'just-range';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport difference from 'lodash.difference';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar SORTED_PITCHES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\nvar ACCIDENTAL_PITCHES = ['Db', 'Eb', 'Gb', 'Ab', 'Bb'];\nvar PITCH_INDEXES = {\n  C: 0,\n  'C#': 1,\n  Db: 1,\n  D: 2,\n  'D#': 3,\n  Eb: 3,\n  E: 4,\n  F: 5,\n  'F#': 6,\n  Gb: 6,\n  G: 7,\n  'G#': 8,\n  Ab: 8,\n  A: 9,\n  'A#': 10,\n  Bb: 10,\n  B: 11\n};\nvar MIDI_NUMBER_C0 = 12;\nvar MIN_MIDI_NUMBER = MIDI_NUMBER_C0;\nvar MAX_MIDI_NUMBER = 127;\nvar NOTE_REGEX = /([a-g])([#b]?)(\\d+)/;\nvar NOTES_IN_OCTAVE = 12; // Converts string notes in scientific pitch notation to a MIDI number, or null.\n//\n// Example: \"c#0\" => 13, \"eb5\" => 75, \"abc\" => null\n//\n// References:\n// - http://www.flutopedia.com/octave_notation.htm\n// - https://github.com/danigb/tonal/blob/master/packages/note/index.js\n\nfunction fromNote(note) {\n  if (!note) {\n    throw Error('Invalid note argument');\n  }\n\n  var match = NOTE_REGEX.exec(note.toLowerCase());\n\n  if (!match) {\n    throw Error('Invalid note argument');\n  }\n\n  var _match = _slicedToArray(match, 4),\n      letter = _match[1],\n      accidental = _match[2],\n      octave = _match[3];\n\n  var pitchName = \"\".concat(letter.toUpperCase()).concat(accidental);\n  var pitchIndex = PITCH_INDEXES[pitchName];\n\n  if (pitchIndex == null) {\n    throw Error('Invalid note argument');\n  }\n\n  return MIDI_NUMBER_C0 + pitchIndex + NOTES_IN_OCTAVE * parseInt(octave, 10);\n} //\n// Build cache for getAttributes\n//\n\n\nfunction buildMidiNumberAttributes(midiNumber) {\n  var pitchIndex = (midiNumber - MIDI_NUMBER_C0) % NOTES_IN_OCTAVE;\n  var octave = Math.floor((midiNumber - MIDI_NUMBER_C0) / NOTES_IN_OCTAVE);\n  var pitchName = SORTED_PITCHES[pitchIndex];\n  return {\n    note: \"\".concat(pitchName).concat(octave),\n    pitchName: pitchName,\n    octave: octave,\n    midiNumber: midiNumber,\n    isAccidental: ACCIDENTAL_PITCHES.includes(pitchName)\n  };\n}\n\nfunction buildMidiNumberAttributesCache() {\n  return range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).reduce(function (cache, midiNumber) {\n    cache[midiNumber] = buildMidiNumberAttributes(midiNumber);\n    return cache;\n  }, {});\n}\n\nvar midiNumberAttributesCache = buildMidiNumberAttributesCache(); // Returns an object containing various attributes for a given MIDI number.\n// Throws error for invalid midiNumbers.\n\nfunction getAttributes(midiNumber) {\n  var attrs = midiNumberAttributesCache[midiNumber];\n\n  if (!attrs) {\n    throw Error('Invalid MIDI number');\n  }\n\n  return attrs;\n} // Returns all MIDI numbers corresponding to natural notes, e.g. C and not C# or Bb.\n\n\nvar NATURAL_MIDI_NUMBERS = range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).filter(function (midiNumber) {\n  return !getAttributes(midiNumber).isAccidental;\n});\nvar MidiNumbers = {\n  fromNote: fromNote,\n  getAttributes: getAttributes,\n  MIN_MIDI_NUMBER: MIN_MIDI_NUMBER,\n  MAX_MIDI_NUMBER: MAX_MIDI_NUMBER,\n  NATURAL_MIDI_NUMBERS: NATURAL_MIDI_NUMBERS\n};\n\nvar Key = /*#__PURE__*/function (_React$Component) {\n  _inherits(Key, _React$Component);\n\n  function Key() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Key);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Key)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onPlayNoteInput\", function () {\n      _this.props.onPlayNoteInput(_this.props.midiNumber);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onStopNoteInput\", function () {\n      _this.props.onStopNoteInput(_this.props.midiNumber);\n    });\n\n    return _this;\n  }\n\n  _createClass(Key, [{\n    key: \"getAbsoluteKeyPosition\",\n    // Key position is represented by the number of natural key widths from the left\n    value: function getAbsoluteKeyPosition(midiNumber) {\n      var OCTAVE_WIDTH = 7;\n\n      var _MidiNumbers$getAttri = MidiNumbers.getAttributes(midiNumber),\n          octave = _MidiNumbers$getAttri.octave,\n          pitchName = _MidiNumbers$getAttri.pitchName;\n\n      var pitchPosition = this.props.pitchPositions[pitchName];\n      var octavePosition = OCTAVE_WIDTH * octave;\n      return pitchPosition + octavePosition;\n    }\n  }, {\n    key: \"getRelativeKeyPosition\",\n    value: function getRelativeKeyPosition(midiNumber) {\n      return this.getAbsoluteKeyPosition(midiNumber) - this.getAbsoluteKeyPosition(this.props.noteRange.first);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          naturalKeyWidth = _this$props.naturalKeyWidth,\n          accidentalWidthRatio = _this$props.accidentalWidthRatio,\n          midiNumber = _this$props.midiNumber,\n          gliss = _this$props.gliss,\n          useTouchEvents = _this$props.useTouchEvents,\n          accidental = _this$props.accidental,\n          active = _this$props.active,\n          disabled = _this$props.disabled,\n          children = _this$props.children; // Need to conditionally include/exclude handlers based on useTouchEvents,\n      // because otherwise mobile taps double fire events.\n\n      return React.createElement(\"div\", {\n        className: classNames('ReactPiano__Key', {\n          'ReactPiano__Key--accidental': accidental,\n          'ReactPiano__Key--natural': !accidental,\n          'ReactPiano__Key--disabled': disabled,\n          'ReactPiano__Key--active': active\n        }),\n        style: {\n          left: ratioToPercentage(this.getRelativeKeyPosition(midiNumber) * naturalKeyWidth),\n          width: ratioToPercentage(accidental ? accidentalWidthRatio * naturalKeyWidth : naturalKeyWidth)\n        },\n        onMouseDown: useTouchEvents ? null : this.onPlayNoteInput,\n        onMouseUp: useTouchEvents ? null : this.onStopNoteInput,\n        onMouseEnter: gliss ? this.onPlayNoteInput : null,\n        onMouseLeave: this.onStopNoteInput,\n        onTouchStart: useTouchEvents ? this.onPlayNoteInput : null,\n        onTouchCancel: useTouchEvents ? this.onStopNoteInput : null,\n        onTouchEnd: useTouchEvents ? this.onStopNoteInput : null\n      }, React.createElement(\"div\", {\n        className: \"ReactPiano__NoteLabelContainer\"\n      }, children));\n    }\n  }]);\n\n  return Key;\n}(React.Component);\n\n_defineProperty(Key, \"propTypes\", {\n  midiNumber: PropTypes.number.isRequired,\n  naturalKeyWidth: PropTypes.number.isRequired,\n  // Width as a ratio between 0 and 1\n  gliss: PropTypes.bool.isRequired,\n  useTouchEvents: PropTypes.bool.isRequired,\n  accidental: PropTypes.bool.isRequired,\n  active: PropTypes.bool.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  onPlayNoteInput: PropTypes.func.isRequired,\n  onStopNoteInput: PropTypes.func.isRequired,\n  accidentalWidthRatio: PropTypes.number.isRequired,\n  pitchPositions: PropTypes.object.isRequired,\n  children: PropTypes.node\n});\n\n_defineProperty(Key, \"defaultProps\", {\n  accidentalWidthRatio: 0.65,\n  pitchPositions: {\n    C: 0,\n    Db: 0.55,\n    D: 1,\n    Eb: 1.8,\n    E: 2,\n    F: 3,\n    Gb: 3.5,\n    G: 4,\n    Ab: 4.7,\n    A: 5,\n    Bb: 5.85,\n    B: 6\n  }\n});\n\nfunction ratioToPercentage(ratio) {\n  return \"\".concat(ratio * 100, \"%\");\n}\n\nvar Keyboard = /*#__PURE__*/function (_React$Component) {\n  _inherits(Keyboard, _React$Component);\n\n  function Keyboard() {\n    _classCallCheck(this, Keyboard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Keyboard).apply(this, arguments));\n  }\n\n  _createClass(Keyboard, [{\n    key: \"getMidiNumbers\",\n    // Range of midi numbers on keyboard\n    value: function getMidiNumbers() {\n      return range(this.props.noteRange.first, this.props.noteRange.last + 1);\n    }\n  }, {\n    key: \"getNaturalKeyCount\",\n    value: function getNaturalKeyCount() {\n      return this.getMidiNumbers().filter(function (number) {\n        var _MidiNumbers$getAttri = MidiNumbers.getAttributes(number),\n            isAccidental = _MidiNumbers$getAttri.isAccidental;\n\n        return !isAccidental;\n      }).length;\n    } // Returns a ratio between 0 and 1\n\n  }, {\n    key: \"getNaturalKeyWidth\",\n    value: function getNaturalKeyWidth() {\n      return 1 / this.getNaturalKeyCount();\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.props.width ? this.props.width : '100%';\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      if (!this.props.width) {\n        return '100%';\n      }\n\n      var keyWidth = this.props.width * this.getNaturalKeyWidth();\n      return \"\".concat(keyWidth / this.props.keyWidthToHeight, \"px\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var naturalKeyWidth = this.getNaturalKeyWidth();\n      return React.createElement(\"div\", {\n        className: classNames('ReactPiano__Keyboard', this.props.className),\n        style: {\n          width: this.getWidth(),\n          height: this.getHeight()\n        }\n      }, this.getMidiNumbers().map(function (midiNumber) {\n        var _MidiNumbers$getAttri2 = MidiNumbers.getAttributes(midiNumber),\n            note = _MidiNumbers$getAttri2.note,\n            isAccidental = _MidiNumbers$getAttri2.isAccidental;\n\n        var isActive = !_this.props.disabled && _this.props.activeNotes.includes(midiNumber);\n\n        return React.createElement(Key, {\n          naturalKeyWidth: naturalKeyWidth,\n          midiNumber: midiNumber,\n          noteRange: _this.props.noteRange,\n          active: isActive,\n          accidental: isAccidental,\n          disabled: _this.props.disabled,\n          onPlayNoteInput: _this.props.onPlayNoteInput,\n          onStopNoteInput: _this.props.onStopNoteInput,\n          gliss: _this.props.gliss,\n          useTouchEvents: _this.props.useTouchEvents,\n          key: midiNumber\n        }, _this.props.disabled ? null : _this.props.renderNoteLabel({\n          isActive: isActive,\n          isAccidental: isAccidental,\n          midiNumber: midiNumber\n        }));\n      }));\n    }\n  }]);\n\n  return Keyboard;\n}(React.Component);\n\n_defineProperty(Keyboard, \"propTypes\", {\n  noteRange: noteRangePropType,\n  activeNotes: PropTypes.arrayOf(PropTypes.number),\n  onPlayNoteInput: PropTypes.func.isRequired,\n  onStopNoteInput: PropTypes.func.isRequired,\n  renderNoteLabel: PropTypes.func.isRequired,\n  keyWidthToHeight: PropTypes.number.isRequired,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  gliss: PropTypes.bool,\n  useTouchEvents: PropTypes.bool,\n  // If width is not provided, must have fixed width and height in parent container\n  width: PropTypes.number\n});\n\n_defineProperty(Keyboard, \"defaultProps\", {\n  disabled: false,\n  gliss: false,\n  useTouchEvents: false,\n  keyWidthToHeight: 0.33,\n  renderNoteLabel: function renderNoteLabel() {}\n});\n\nfunction isNaturalMidiNumber(value) {\n  if (typeof value !== 'number') {\n    return false;\n  }\n\n  return MidiNumbers.NATURAL_MIDI_NUMBERS.includes(value);\n}\n\nfunction noteRangePropType(props, propName, componentName) {\n  var _props$propName = props[propName],\n      first = _props$propName.first,\n      last = _props$propName.last;\n\n  if (!first || !last) {\n    return new Error(\"Invalid prop \".concat(propName, \" supplied to \").concat(componentName, \". \").concat(propName, \" must be an object with .first and .last values.\"));\n  }\n\n  if (!isNaturalMidiNumber(first) || !isNaturalMidiNumber(last)) {\n    return new Error(\"Invalid prop \".concat(propName, \" supplied to \").concat(componentName, \". \").concat(propName, \" values must be valid MIDI numbers, and should not be accidentals (sharp or flat notes).\"));\n  }\n\n  if (first >= last) {\n    return new Error(\"Invalid prop \".concat(propName, \" supplied to \").concat(componentName, \". \").concat(propName, \".first must be smaller than \").concat(propName, \".last.\"));\n  }\n}\n\nvar ControlledPiano = /*#__PURE__*/function (_React$Component) {\n  _inherits(ControlledPiano, _React$Component);\n\n  function ControlledPiano() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ControlledPiano);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ControlledPiano)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isMouseDown: false,\n      useTouchEvents: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleNoteChanges\", function (_ref) {\n      var prevActiveNotes = _ref.prevActiveNotes,\n          nextActiveNotes = _ref.nextActiveNotes;\n\n      if (_this.props.disabled) {\n        return;\n      }\n\n      var notesStopped = difference(prevActiveNotes, nextActiveNotes);\n      var notesStarted = difference(nextActiveNotes, prevActiveNotes);\n      notesStarted.forEach(function (midiNumber) {\n        _this.props.playNote(midiNumber);\n      });\n      notesStopped.forEach(function (midiNumber) {\n        _this.props.stopNote(midiNumber);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMidiNumberForKey\", function (key) {\n      if (!_this.props.keyboardShortcuts) {\n        return null;\n      }\n\n      var shortcut = _this.props.keyboardShortcuts.find(function (sh) {\n        return sh.key === key;\n      });\n\n      return shortcut && shortcut.midiNumber;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getKeyForMidiNumber\", function (midiNumber) {\n      if (!_this.props.keyboardShortcuts) {\n        return null;\n      }\n\n      var shortcut = _this.props.keyboardShortcuts.find(function (sh) {\n        return sh.midiNumber === midiNumber;\n      });\n\n      return shortcut && shortcut.key;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (event) {\n      // Don't conflict with existing combinations like ctrl + t\n      if (event.ctrlKey || event.metaKey || event.shiftKey) {\n        return;\n      }\n\n      var midiNumber = _this.getMidiNumberForKey(event.key);\n\n      if (midiNumber) {\n        _this.onPlayNoteInput(midiNumber);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyUp\", function (event) {\n      // This *should* also check for event.ctrlKey || event.metaKey || event.ShiftKey like onKeyDown does,\n      // but at least on Mac Chrome, when mashing down many alphanumeric keystrokes at once,\n      // ctrlKey is fired unexpectedly, which would cause onStopNote to NOT be fired, which causes problematic\n      // lingering notes. Since it's fairly safe to call onStopNote even when not necessary,\n      // the ctrl/meta/shift check is removed to fix that issue.\n      var midiNumber = _this.getMidiNumberForKey(event.key);\n\n      if (midiNumber) {\n        _this.onStopNoteInput(midiNumber);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPlayNoteInput\", function (midiNumber) {\n      if (_this.props.disabled) {\n        return;\n      } // Pass in previous activeNotes for recording functionality\n\n\n      _this.props.onPlayNoteInput(midiNumber, _this.props.activeNotes);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onStopNoteInput\", function (midiNumber) {\n      if (_this.props.disabled) {\n        return;\n      } // Pass in previous activeNotes for recording functionality\n\n\n      _this.props.onStopNoteInput(midiNumber, _this.props.activeNotes);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseDown\", function () {\n      _this.setState({\n        isMouseDown: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseUp\", function () {\n      _this.setState({\n        isMouseDown: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchStart\", function () {\n      _this.setState({\n        useTouchEvents: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderNoteLabel\", function (_ref2) {\n      var midiNumber = _ref2.midiNumber,\n          isActive = _ref2.isActive,\n          isAccidental = _ref2.isAccidental;\n\n      var keyboardShortcut = _this.getKeyForMidiNumber(midiNumber);\n\n      return _this.props.renderNoteLabel({\n        keyboardShortcut: keyboardShortcut,\n        midiNumber: midiNumber,\n        isActive: isActive,\n        isAccidental: isAccidental\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ControlledPiano, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('keydown', this.onKeyDown);\n      window.addEventListener('keyup', this.onKeyUp);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('keydown', this.onKeyDown);\n      window.removeEventListener('keyup', this.onKeyUp);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.activeNotes !== prevProps.activeNotes) {\n        this.handleNoteChanges({\n          prevActiveNotes: prevProps.activeNotes || [],\n          nextActiveNotes: this.props.activeNotes || []\n        });\n      }\n    } // This function is responsible for diff'ing activeNotes\n    // and playing or stopping notes accordingly.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        onMouseDown: this.onMouseDown,\n        onMouseUp: this.onMouseUp,\n        onTouchStart: this.onTouchStart,\n        \"data-testid\": \"container\"\n      }, React.createElement(Keyboard, {\n        noteRange: this.props.noteRange,\n        onPlayNoteInput: this.onPlayNoteInput,\n        onStopNoteInput: this.onStopNoteInput,\n        activeNotes: this.props.activeNotes,\n        className: this.props.className,\n        disabled: this.props.disabled,\n        width: this.props.width,\n        keyWidthToHeight: this.props.keyWidthToHeight,\n        gliss: this.state.isMouseDown,\n        useTouchEvents: this.state.useTouchEvents,\n        renderNoteLabel: this.renderNoteLabel\n      }));\n    }\n  }]);\n\n  return ControlledPiano;\n}(React.Component);\n\n_defineProperty(ControlledPiano, \"propTypes\", {\n  noteRange: PropTypes.object.isRequired,\n  activeNotes: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,\n  playNote: PropTypes.func.isRequired,\n  stopNote: PropTypes.func.isRequired,\n  onPlayNoteInput: PropTypes.func.isRequired,\n  onStopNoteInput: PropTypes.func.isRequired,\n  renderNoteLabel: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  width: PropTypes.number,\n  keyWidthToHeight: PropTypes.number,\n  keyboardShortcuts: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string.isRequired,\n    midiNumber: PropTypes.number.isRequired\n  }))\n});\n\n_defineProperty(ControlledPiano, \"defaultProps\", {\n  renderNoteLabel: function renderNoteLabel(_ref3) {\n    var keyboardShortcut = _ref3.keyboardShortcut,\n        midiNumber = _ref3.midiNumber,\n        isActive = _ref3.isActive,\n        isAccidental = _ref3.isAccidental;\n    return keyboardShortcut ? React.createElement(\"div\", {\n      className: classNames('ReactPiano__NoteLabel', {\n        'ReactPiano__NoteLabel--active': isActive,\n        'ReactPiano__NoteLabel--accidental': isAccidental,\n        'ReactPiano__NoteLabel--natural': !isAccidental\n      })\n    }, keyboardShortcut) : null;\n  }\n});\n\nvar Piano = /*#__PURE__*/function (_React$Component) {\n  _inherits(Piano, _React$Component);\n\n  function Piano() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Piano);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Piano)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      activeNotes: _this.props.activeNotes || []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePlayNoteInput\", function (midiNumber) {\n      _this.setState(function (prevState) {\n        // Need to be handled inside setState in order to set prevActiveNotes without\n        // race conditions.\n        if (_this.props.onPlayNoteInput) {\n          _this.props.onPlayNoteInput(midiNumber, {\n            prevActiveNotes: prevState.activeNotes\n          });\n        } // Don't append note to activeNotes if it's already present\n\n\n        if (prevState.activeNotes.includes(midiNumber)) {\n          return null;\n        }\n\n        return {\n          activeNotes: prevState.activeNotes.concat(midiNumber)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStopNoteInput\", function (midiNumber) {\n      _this.setState(function (prevState) {\n        // Need to be handled inside setState in order to set prevActiveNotes without\n        // race conditions.\n        if (_this.props.onStopNoteInput) {\n          _this.props.onStopNoteInput(midiNumber, {\n            prevActiveNotes: _this.state.activeNotes\n          });\n        }\n\n        return {\n          activeNotes: prevState.activeNotes.filter(function (note) {\n            return midiNumber !== note;\n          })\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Piano, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // Make activeNotes \"controllable\" by using internal\n      // state by default, but allowing prop overrides.\n      if (prevProps.activeNotes !== this.props.activeNotes && this.state.activeNotes !== this.props.activeNotes) {\n        this.setState({\n          activeNotes: this.props.activeNotes || []\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          activeNotes = _this$props.activeNotes,\n          onPlayNoteInput = _this$props.onPlayNoteInput,\n          onStopNoteInput = _this$props.onStopNoteInput,\n          otherProps = _objectWithoutProperties(_this$props, [\"activeNotes\", \"onPlayNoteInput\", \"onStopNoteInput\"]);\n\n      return React.createElement(ControlledPiano, _extends({\n        activeNotes: this.state.activeNotes,\n        onPlayNoteInput: this.handlePlayNoteInput,\n        onStopNoteInput: this.handleStopNoteInput\n      }, otherProps));\n    }\n  }]);\n\n  return Piano;\n}(React.Component);\n\n_defineProperty(Piano, \"propTypes\", {\n  noteRange: PropTypes.object.isRequired,\n  activeNotes: PropTypes.arrayOf(PropTypes.number.isRequired),\n  playNote: PropTypes.func.isRequired,\n  stopNote: PropTypes.func.isRequired,\n  onPlayNoteInput: PropTypes.func,\n  onStopNoteInput: PropTypes.func,\n  renderNoteLabel: PropTypes.func,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  width: PropTypes.number,\n  keyWidthToHeight: PropTypes.number,\n  keyboardShortcuts: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string.isRequired,\n    midiNumber: PropTypes.number.isRequired\n  }))\n});\n\nfunction createKeyboardShortcuts(_ref) {\n  var firstNote = _ref.firstNote,\n      lastNote = _ref.lastNote,\n      keyboardConfig = _ref.keyboardConfig;\n  var currentMidiNumber = firstNote;\n  var naturalKeyIndex = 0;\n  var keyboardShortcuts = [];\n\n  while ( // There are still keys to be assigned\n  naturalKeyIndex < keyboardConfig.length && // Note to be assigned does not surpass range\n  currentMidiNumber <= lastNote) {\n    var key = keyboardConfig[naturalKeyIndex];\n\n    var _MidiNumbers$getAttri = MidiNumbers.getAttributes(currentMidiNumber),\n        isAccidental = _MidiNumbers$getAttri.isAccidental;\n\n    if (isAccidental) {\n      keyboardShortcuts.push({\n        key: key.flat,\n        midiNumber: currentMidiNumber\n      });\n    } else {\n      keyboardShortcuts.push({\n        key: key.natural,\n        midiNumber: currentMidiNumber\n      });\n      naturalKeyIndex += 1;\n    }\n\n    currentMidiNumber += 1;\n  }\n\n  return keyboardShortcuts;\n}\n\nvar KeyboardShortcuts = {\n  create: createKeyboardShortcuts,\n  // Preset configurations\n  BOTTOM_ROW: [{\n    natural: 'z',\n    flat: 'a',\n    sharp: 's'\n  }, {\n    natural: 'x',\n    flat: 's',\n    sharp: 'd'\n  }, {\n    natural: 'c',\n    flat: 'd',\n    sharp: 'f'\n  }, {\n    natural: 'v',\n    flat: 'f',\n    sharp: 'g'\n  }, {\n    natural: 'b',\n    flat: 'g',\n    sharp: 'h'\n  }, {\n    natural: 'n',\n    flat: 'h',\n    sharp: 'j'\n  }, {\n    natural: 'm',\n    flat: 'j',\n    sharp: 'k'\n  }, {\n    natural: ',',\n    flat: 'k',\n    sharp: 'l'\n  }, {\n    natural: '.',\n    flat: 'l',\n    sharp: ';'\n  }, {\n    natural: '/',\n    flat: ';',\n    sharp: \"'\"\n  }],\n  HOME_ROW: [{\n    natural: 'a',\n    flat: 'q',\n    sharp: 'w'\n  }, {\n    natural: 's',\n    flat: 'w',\n    sharp: 'e'\n  }, {\n    natural: 'd',\n    flat: 'e',\n    sharp: 'r'\n  }, {\n    natural: 'f',\n    flat: 'r',\n    sharp: 't'\n  }, {\n    natural: 'g',\n    flat: 't',\n    sharp: 'y'\n  }, {\n    natural: 'h',\n    flat: 'y',\n    sharp: 'u'\n  }, {\n    natural: 'j',\n    flat: 'u',\n    sharp: 'i'\n  }, {\n    natural: 'k',\n    flat: 'i',\n    sharp: 'o'\n  }, {\n    natural: 'l',\n    flat: 'o',\n    sharp: 'p'\n  }, {\n    natural: ';',\n    flat: 'p',\n    sharp: '['\n  }, {\n    natural: \"'\",\n    flat: '[',\n    sharp: ']'\n  }],\n  QWERTY_ROW: [{\n    natural: 'q',\n    flat: '1',\n    sharp: '2'\n  }, {\n    natural: 'w',\n    flat: '2',\n    sharp: '3'\n  }, {\n    natural: 'e',\n    flat: '3',\n    sharp: '4'\n  }, {\n    natural: 'r',\n    flat: '4',\n    sharp: '5'\n  }, {\n    natural: 't',\n    flat: '5',\n    sharp: '6'\n  }, {\n    natural: 'y',\n    flat: '6',\n    sharp: '7'\n  }, {\n    natural: 'u',\n    flat: '7',\n    sharp: '8'\n  }, {\n    natural: 'i',\n    flat: '8',\n    sharp: '9'\n  }, {\n    natural: 'o',\n    flat: '9',\n    sharp: '0'\n  }, {\n    natural: 'p',\n    flat: '0',\n    sharp: '-'\n  }, {\n    natural: '[',\n    flat: '-',\n    sharp: '='\n  }]\n};\nexport { ControlledPiano, Piano, Keyboard, KeyboardShortcuts, MidiNumbers };","map":{"version":3,"sources":["../src/MidiNumbers.js","../src/Key.js","../src/Keyboard.js","../src/ControlledPiano.js","../src/Piano.js","../src/KeyboardShortcuts.js"],"names":["SORTED_PITCHES","ACCIDENTAL_PITCHES","PITCH_INDEXES","C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B","MIDI_NUMBER_C0","MIN_MIDI_NUMBER","MAX_MIDI_NUMBER","NOTE_REGEX","NOTES_IN_OCTAVE","Error","match","note","letter","accidental","octave","pitchName","pitchIndex","parseInt","midiNumber","Math","isAccidental","cache","buildMidiNumberAttributes","midiNumberAttributesCache","buildMidiNumberAttributesCache","attrs","NATURAL_MIDI_NUMBERS","getAttributes","fromNote","Key","React","Component","PropTypes","naturalKeyWidth","gliss","useTouchEvents","active","disabled","onPlayNoteInput","onStopNoteInput","accidentalWidthRatio","pitchPositions","children","node","OCTAVE_WIDTH","MidiNumbers","pitchPosition","octavePosition","classNames","left","ratioToPercentage","width","ratio","Keyboard","noteRange","activeNotes","renderNoteLabel","keyWidthToHeight","className","number","range","keyWidth","height","isActive","first","last","props","isNaturalMidiNumber","ControlledPiano","playNote","stopNote","keyboardShortcuts","key","isRequired","keyboardShortcut","isMouseDown","window","prevProps","prevState","prevActiveNotes","nextActiveNotes","notesStopped","difference","notesStarted","shortcut","sh","event","Piano","otherProps","handleStopNoteInput","firstNote","lastNote","keyboardConfig","currentMidiNumber","naturalKeyIndex","create","BOTTOM_ROW","natural","flat","sharp","HOME_ROW","QWERTY_ROW"],"mappings":"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","sourcesContent":["import range from 'just-range';\n\nconst SORTED_PITCHES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\nconst ACCIDENTAL_PITCHES = ['Db', 'Eb', 'Gb', 'Ab', 'Bb'];\nconst PITCH_INDEXES = {\n  C: 0,\n  'C#': 1,\n  Db: 1,\n  D: 2,\n  'D#': 3,\n  Eb: 3,\n  E: 4,\n  F: 5,\n  'F#': 6,\n  Gb: 6,\n  G: 7,\n  'G#': 8,\n  Ab: 8,\n  A: 9,\n  'A#': 10,\n  Bb: 10,\n  B: 11,\n};\nconst MIDI_NUMBER_C0 = 12;\nconst MIN_MIDI_NUMBER = MIDI_NUMBER_C0;\nconst MAX_MIDI_NUMBER = 127;\nconst NOTE_REGEX = /([a-g])([#b]?)(\\d+)/;\nconst NOTES_IN_OCTAVE = 12;\n\n// Converts string notes in scientific pitch notation to a MIDI number, or null.\n//\n// Example: \"c#0\" => 13, \"eb5\" => 75, \"abc\" => null\n//\n// References:\n// - http://www.flutopedia.com/octave_notation.htm\n// - https://github.com/danigb/tonal/blob/master/packages/note/index.js\nfunction fromNote(note) {\n  if (!note) {\n    throw Error('Invalid note argument');\n  }\n  const match = NOTE_REGEX.exec(note.toLowerCase());\n  if (!match) {\n    throw Error('Invalid note argument');\n  }\n  const [, letter, accidental, octave] = match;\n  const pitchName = `${letter.toUpperCase()}${accidental}`;\n  const pitchIndex = PITCH_INDEXES[pitchName];\n  if (pitchIndex == null) {\n    throw Error('Invalid note argument');\n  }\n  return MIDI_NUMBER_C0 + pitchIndex + NOTES_IN_OCTAVE * parseInt(octave, 10);\n}\n\n//\n// Build cache for getAttributes\n//\nfunction buildMidiNumberAttributes(midiNumber) {\n  const pitchIndex = (midiNumber - MIDI_NUMBER_C0) % NOTES_IN_OCTAVE;\n  const octave = Math.floor((midiNumber - MIDI_NUMBER_C0) / NOTES_IN_OCTAVE);\n  const pitchName = SORTED_PITCHES[pitchIndex];\n  return {\n    note: `${pitchName}${octave}`,\n    pitchName,\n    octave,\n    midiNumber,\n    isAccidental: ACCIDENTAL_PITCHES.includes(pitchName),\n  };\n}\n\nfunction buildMidiNumberAttributesCache() {\n  return range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).reduce((cache, midiNumber) => {\n    cache[midiNumber] = buildMidiNumberAttributes(midiNumber);\n    return cache;\n  }, {});\n}\n\nconst midiNumberAttributesCache = buildMidiNumberAttributesCache();\n\n// Returns an object containing various attributes for a given MIDI number.\n// Throws error for invalid midiNumbers.\nfunction getAttributes(midiNumber) {\n  const attrs = midiNumberAttributesCache[midiNumber];\n  if (!attrs) {\n    throw Error('Invalid MIDI number');\n  }\n  return attrs;\n}\n\n// Returns all MIDI numbers corresponding to natural notes, e.g. C and not C# or Bb.\nconst NATURAL_MIDI_NUMBERS = range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).filter(\n  (midiNumber) => !getAttributes(midiNumber).isAccidental,\n);\n\nexport default {\n  fromNote,\n  getAttributes,\n  MIN_MIDI_NUMBER,\n  MAX_MIDI_NUMBER,\n  NATURAL_MIDI_NUMBERS,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport MidiNumbers from './MidiNumbers';\n\nclass Key extends React.Component {\n  static propTypes = {\n    midiNumber: PropTypes.number.isRequired,\n    naturalKeyWidth: PropTypes.number.isRequired, // Width as a ratio between 0 and 1\n    gliss: PropTypes.bool.isRequired,\n    useTouchEvents: PropTypes.bool.isRequired,\n    accidental: PropTypes.bool.isRequired,\n    active: PropTypes.bool.isRequired,\n    disabled: PropTypes.bool.isRequired,\n    onPlayNoteInput: PropTypes.func.isRequired,\n    onStopNoteInput: PropTypes.func.isRequired,\n    accidentalWidthRatio: PropTypes.number.isRequired,\n    pitchPositions: PropTypes.object.isRequired,\n    children: PropTypes.node,\n  };\n\n  static defaultProps = {\n    accidentalWidthRatio: 0.65,\n    pitchPositions: {\n      C: 0,\n      Db: 0.55,\n      D: 1,\n      Eb: 1.8,\n      E: 2,\n      F: 3,\n      Gb: 3.5,\n      G: 4,\n      Ab: 4.7,\n      A: 5,\n      Bb: 5.85,\n      B: 6,\n    },\n  };\n\n  onPlayNoteInput = () => {\n    this.props.onPlayNoteInput(this.props.midiNumber);\n  };\n\n  onStopNoteInput = () => {\n    this.props.onStopNoteInput(this.props.midiNumber);\n  };\n\n  // Key position is represented by the number of natural key widths from the left\n  getAbsoluteKeyPosition(midiNumber) {\n    const OCTAVE_WIDTH = 7;\n    const { octave, pitchName } = MidiNumbers.getAttributes(midiNumber);\n    const pitchPosition = this.props.pitchPositions[pitchName];\n    const octavePosition = OCTAVE_WIDTH * octave;\n    return pitchPosition + octavePosition;\n  }\n\n  getRelativeKeyPosition(midiNumber) {\n    return (\n      this.getAbsoluteKeyPosition(midiNumber) -\n      this.getAbsoluteKeyPosition(this.props.noteRange.first)\n    );\n  }\n\n  render() {\n    const {\n      naturalKeyWidth,\n      accidentalWidthRatio,\n      midiNumber,\n      gliss,\n      useTouchEvents,\n      accidental,\n      active,\n      disabled,\n      children,\n    } = this.props;\n\n    // Need to conditionally include/exclude handlers based on useTouchEvents,\n    // because otherwise mobile taps double fire events.\n    return (\n      <div\n        className={classNames('ReactPiano__Key', {\n          'ReactPiano__Key--accidental': accidental,\n          'ReactPiano__Key--natural': !accidental,\n          'ReactPiano__Key--disabled': disabled,\n          'ReactPiano__Key--active': active,\n        })}\n        style={{\n          left: ratioToPercentage(this.getRelativeKeyPosition(midiNumber) * naturalKeyWidth),\n          width: ratioToPercentage(\n            accidental ? accidentalWidthRatio * naturalKeyWidth : naturalKeyWidth,\n          ),\n        }}\n        onMouseDown={useTouchEvents ? null : this.onPlayNoteInput}\n        onMouseUp={useTouchEvents ? null : this.onStopNoteInput}\n        onMouseEnter={gliss ? this.onPlayNoteInput : null}\n        onMouseLeave={this.onStopNoteInput}\n        onTouchStart={useTouchEvents ? this.onPlayNoteInput : null}\n        onTouchCancel={useTouchEvents ? this.onStopNoteInput : null}\n        onTouchEnd={useTouchEvents ? this.onStopNoteInput : null}\n      >\n        <div className=\"ReactPiano__NoteLabelContainer\">{children}</div>\n      </div>\n    );\n  }\n}\n\nfunction ratioToPercentage(ratio) {\n  return `${ratio * 100}%`;\n}\n\nexport default Key;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport range from 'just-range';\nimport classNames from 'classnames';\n\nimport Key from './Key';\nimport MidiNumbers from './MidiNumbers';\n\nclass Keyboard extends React.Component {\n  static propTypes = {\n    noteRange: noteRangePropType,\n    activeNotes: PropTypes.arrayOf(PropTypes.number),\n    onPlayNoteInput: PropTypes.func.isRequired,\n    onStopNoteInput: PropTypes.func.isRequired,\n    renderNoteLabel: PropTypes.func.isRequired,\n    keyWidthToHeight: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    gliss: PropTypes.bool,\n    useTouchEvents: PropTypes.bool,\n    // If width is not provided, must have fixed width and height in parent container\n    width: PropTypes.number,\n  };\n\n  static defaultProps = {\n    disabled: false,\n    gliss: false,\n    useTouchEvents: false,\n    keyWidthToHeight: 0.33,\n    renderNoteLabel: () => {},\n  };\n\n  // Range of midi numbers on keyboard\n  getMidiNumbers() {\n    return range(this.props.noteRange.first, this.props.noteRange.last + 1);\n  }\n\n  getNaturalKeyCount() {\n    return this.getMidiNumbers().filter((number) => {\n      const { isAccidental } = MidiNumbers.getAttributes(number);\n      return !isAccidental;\n    }).length;\n  }\n\n  // Returns a ratio between 0 and 1\n  getNaturalKeyWidth() {\n    return 1 / this.getNaturalKeyCount();\n  }\n\n  getWidth() {\n    return this.props.width ? this.props.width : '100%';\n  }\n\n  getHeight() {\n    if (!this.props.width) {\n      return '100%';\n    }\n    const keyWidth = this.props.width * this.getNaturalKeyWidth();\n    return `${keyWidth / this.props.keyWidthToHeight}px`;\n  }\n\n  render() {\n    const naturalKeyWidth = this.getNaturalKeyWidth();\n    return (\n      <div\n        className={classNames('ReactPiano__Keyboard', this.props.className)}\n        style={{ width: this.getWidth(), height: this.getHeight() }}\n      >\n        {this.getMidiNumbers().map((midiNumber) => {\n          const { note, isAccidental } = MidiNumbers.getAttributes(midiNumber);\n          const isActive = !this.props.disabled && this.props.activeNotes.includes(midiNumber);\n          return (\n            <Key\n              naturalKeyWidth={naturalKeyWidth}\n              midiNumber={midiNumber}\n              noteRange={this.props.noteRange}\n              active={isActive}\n              accidental={isAccidental}\n              disabled={this.props.disabled}\n              onPlayNoteInput={this.props.onPlayNoteInput}\n              onStopNoteInput={this.props.onStopNoteInput}\n              gliss={this.props.gliss}\n              useTouchEvents={this.props.useTouchEvents}\n              key={midiNumber}\n            >\n              {this.props.disabled\n                ? null\n                : this.props.renderNoteLabel({\n                    isActive,\n                    isAccidental,\n                    midiNumber,\n                  })}\n            </Key>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nfunction isNaturalMidiNumber(value) {\n  if (typeof value !== 'number') {\n    return false;\n  }\n  return MidiNumbers.NATURAL_MIDI_NUMBERS.includes(value);\n}\n\nfunction noteRangePropType(props, propName, componentName) {\n  const { first, last } = props[propName];\n  if (!first || !last) {\n    return new Error(\n      `Invalid prop ${propName} supplied to ${componentName}. ${propName} must be an object with .first and .last values.`,\n    );\n  }\n  if (!isNaturalMidiNumber(first) || !isNaturalMidiNumber(last)) {\n    return new Error(\n      `Invalid prop ${propName} supplied to ${componentName}. ${propName} values must be valid MIDI numbers, and should not be accidentals (sharp or flat notes).`,\n    );\n  }\n  if (first >= last) {\n    return new Error(\n      `Invalid prop ${propName} supplied to ${componentName}. ${propName}.first must be smaller than ${propName}.last.`,\n    );\n  }\n}\n\nexport default Keyboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport difference from 'lodash.difference';\nimport Keyboard from './Keyboard';\n\nclass ControlledPiano extends React.Component {\n  static propTypes = {\n    noteRange: PropTypes.object.isRequired,\n    activeNotes: PropTypes.arrayOf(PropTypes.number.isRequired).isRequired,\n    playNote: PropTypes.func.isRequired,\n    stopNote: PropTypes.func.isRequired,\n    onPlayNoteInput: PropTypes.func.isRequired,\n    onStopNoteInput: PropTypes.func.isRequired,\n    renderNoteLabel: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    width: PropTypes.number,\n    keyWidthToHeight: PropTypes.number,\n    keyboardShortcuts: PropTypes.arrayOf(\n      PropTypes.shape({\n        key: PropTypes.string.isRequired,\n        midiNumber: PropTypes.number.isRequired,\n      }),\n    ),\n  };\n\n  static defaultProps = {\n    renderNoteLabel: ({ keyboardShortcut, midiNumber, isActive, isAccidental }) =>\n      keyboardShortcut ? (\n        <div\n          className={classNames('ReactPiano__NoteLabel', {\n            'ReactPiano__NoteLabel--active': isActive,\n            'ReactPiano__NoteLabel--accidental': isAccidental,\n            'ReactPiano__NoteLabel--natural': !isAccidental,\n          })}\n        >\n          {keyboardShortcut}\n        </div>\n      ) : null,\n  };\n\n  state = {\n    isMouseDown: false,\n    useTouchEvents: false,\n  };\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('keyup', this.onKeyUp);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.onKeyDown);\n    window.removeEventListener('keyup', this.onKeyUp);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.activeNotes !== prevProps.activeNotes) {\n      this.handleNoteChanges({\n        prevActiveNotes: prevProps.activeNotes || [],\n        nextActiveNotes: this.props.activeNotes || [],\n      });\n    }\n  }\n\n  // This function is responsible for diff'ing activeNotes\n  // and playing or stopping notes accordingly.\n  handleNoteChanges = ({ prevActiveNotes, nextActiveNotes }) => {\n    if (this.props.disabled) {\n      return;\n    }\n    const notesStopped = difference(prevActiveNotes, nextActiveNotes);\n    const notesStarted = difference(nextActiveNotes, prevActiveNotes);\n    notesStarted.forEach((midiNumber) => {\n      this.props.playNote(midiNumber);\n    });\n    notesStopped.forEach((midiNumber) => {\n      this.props.stopNote(midiNumber);\n    });\n  };\n\n  getMidiNumberForKey = (key) => {\n    if (!this.props.keyboardShortcuts) {\n      return null;\n    }\n    const shortcut = this.props.keyboardShortcuts.find((sh) => sh.key === key);\n    return shortcut && shortcut.midiNumber;\n  };\n\n  getKeyForMidiNumber = (midiNumber) => {\n    if (!this.props.keyboardShortcuts) {\n      return null;\n    }\n    const shortcut = this.props.keyboardShortcuts.find((sh) => sh.midiNumber === midiNumber);\n    return shortcut && shortcut.key;\n  };\n\n  onKeyDown = (event) => {\n    // Don't conflict with existing combinations like ctrl + t\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n    const midiNumber = this.getMidiNumberForKey(event.key);\n    if (midiNumber) {\n      this.onPlayNoteInput(midiNumber);\n    }\n  };\n\n  onKeyUp = (event) => {\n    // This *should* also check for event.ctrlKey || event.metaKey || event.ShiftKey like onKeyDown does,\n    // but at least on Mac Chrome, when mashing down many alphanumeric keystrokes at once,\n    // ctrlKey is fired unexpectedly, which would cause onStopNote to NOT be fired, which causes problematic\n    // lingering notes. Since it's fairly safe to call onStopNote even when not necessary,\n    // the ctrl/meta/shift check is removed to fix that issue.\n    const midiNumber = this.getMidiNumberForKey(event.key);\n    if (midiNumber) {\n      this.onStopNoteInput(midiNumber);\n    }\n  };\n\n  onPlayNoteInput = (midiNumber) => {\n    if (this.props.disabled) {\n      return;\n    }\n    // Pass in previous activeNotes for recording functionality\n    this.props.onPlayNoteInput(midiNumber, this.props.activeNotes);\n  };\n\n  onStopNoteInput = (midiNumber) => {\n    if (this.props.disabled) {\n      return;\n    }\n    // Pass in previous activeNotes for recording functionality\n    this.props.onStopNoteInput(midiNumber, this.props.activeNotes);\n  };\n\n  onMouseDown = () => {\n    this.setState({\n      isMouseDown: true,\n    });\n  };\n\n  onMouseUp = () => {\n    this.setState({\n      isMouseDown: false,\n    });\n  };\n\n  onTouchStart = () => {\n    this.setState({\n      useTouchEvents: true,\n    });\n  };\n\n  renderNoteLabel = ({ midiNumber, isActive, isAccidental }) => {\n    const keyboardShortcut = this.getKeyForMidiNumber(midiNumber);\n    return this.props.renderNoteLabel({ keyboardShortcut, midiNumber, isActive, isAccidental });\n  };\n\n  render() {\n    return (\n      <div\n        style={{ width: '100%', height: '100%' }}\n        onMouseDown={this.onMouseDown}\n        onMouseUp={this.onMouseUp}\n        onTouchStart={this.onTouchStart}\n        data-testid=\"container\"\n      >\n        <Keyboard\n          noteRange={this.props.noteRange}\n          onPlayNoteInput={this.onPlayNoteInput}\n          onStopNoteInput={this.onStopNoteInput}\n          activeNotes={this.props.activeNotes}\n          className={this.props.className}\n          disabled={this.props.disabled}\n          width={this.props.width}\n          keyWidthToHeight={this.props.keyWidthToHeight}\n          gliss={this.state.isMouseDown}\n          useTouchEvents={this.state.useTouchEvents}\n          renderNoteLabel={this.renderNoteLabel}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ControlledPiano;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport difference from 'lodash.difference';\nimport ControlledPiano from './ControlledPiano';\nimport Keyboard from './Keyboard';\n\nclass Piano extends React.Component {\n  static propTypes = {\n    noteRange: PropTypes.object.isRequired,\n    activeNotes: PropTypes.arrayOf(PropTypes.number.isRequired),\n    playNote: PropTypes.func.isRequired,\n    stopNote: PropTypes.func.isRequired,\n    onPlayNoteInput: PropTypes.func,\n    onStopNoteInput: PropTypes.func,\n    renderNoteLabel: PropTypes.func,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    width: PropTypes.number,\n    keyWidthToHeight: PropTypes.number,\n    keyboardShortcuts: PropTypes.arrayOf(\n      PropTypes.shape({\n        key: PropTypes.string.isRequired,\n        midiNumber: PropTypes.number.isRequired,\n      }),\n    ),\n  };\n\n  state = {\n    activeNotes: this.props.activeNotes || [],\n  };\n\n  componentDidUpdate(prevProps) {\n    // Make activeNotes \"controllable\" by using internal\n    // state by default, but allowing prop overrides.\n    if (\n      prevProps.activeNotes !== this.props.activeNotes &&\n      this.state.activeNotes !== this.props.activeNotes\n    ) {\n      this.setState({\n        activeNotes: this.props.activeNotes || [],\n      });\n    }\n  }\n\n  handlePlayNoteInput = (midiNumber) => {\n    this.setState((prevState) => {\n      // Need to be handled inside setState in order to set prevActiveNotes without\n      // race conditions.\n      if (this.props.onPlayNoteInput) {\n        this.props.onPlayNoteInput(midiNumber, { prevActiveNotes: prevState.activeNotes });\n      }\n\n      // Don't append note to activeNotes if it's already present\n      if (prevState.activeNotes.includes(midiNumber)) {\n        return null;\n      }\n      return {\n        activeNotes: prevState.activeNotes.concat(midiNumber),\n      };\n    });\n  };\n\n  handleStopNoteInput = (midiNumber) => {\n    this.setState((prevState) => {\n      // Need to be handled inside setState in order to set prevActiveNotes without\n      // race conditions.\n      if (this.props.onStopNoteInput) {\n        this.props.onStopNoteInput(midiNumber, { prevActiveNotes: this.state.activeNotes });\n      }\n      return {\n        activeNotes: prevState.activeNotes.filter((note) => midiNumber !== note),\n      };\n    });\n  };\n\n  render() {\n    const { activeNotes, onPlayNoteInput, onStopNoteInput, ...otherProps } = this.props;\n    return (\n      <ControlledPiano\n        activeNotes={this.state.activeNotes}\n        onPlayNoteInput={this.handlePlayNoteInput}\n        onStopNoteInput={this.handleStopNoteInput}\n        {...otherProps}\n      />\n    );\n  }\n}\n\nexport default Piano;\n","import MidiNumbers from './MidiNumbers';\n\nfunction createKeyboardShortcuts({ firstNote, lastNote, keyboardConfig }) {\n  let currentMidiNumber = firstNote;\n  let naturalKeyIndex = 0;\n  let keyboardShortcuts = [];\n\n  while (\n    // There are still keys to be assigned\n    naturalKeyIndex < keyboardConfig.length &&\n    // Note to be assigned does not surpass range\n    currentMidiNumber <= lastNote\n  ) {\n    const key = keyboardConfig[naturalKeyIndex];\n    const { isAccidental } = MidiNumbers.getAttributes(currentMidiNumber);\n    if (isAccidental) {\n      keyboardShortcuts.push({\n        key: key.flat,\n        midiNumber: currentMidiNumber,\n      });\n    } else {\n      keyboardShortcuts.push({\n        key: key.natural,\n        midiNumber: currentMidiNumber,\n      });\n      naturalKeyIndex += 1;\n    }\n    currentMidiNumber += 1;\n  }\n  return keyboardShortcuts;\n}\n\nexport default {\n  create: createKeyboardShortcuts,\n  // Preset configurations\n  BOTTOM_ROW: [\n    { natural: 'z', flat: 'a', sharp: 's' },\n    { natural: 'x', flat: 's', sharp: 'd' },\n    { natural: 'c', flat: 'd', sharp: 'f' },\n    { natural: 'v', flat: 'f', sharp: 'g' },\n    { natural: 'b', flat: 'g', sharp: 'h' },\n    { natural: 'n', flat: 'h', sharp: 'j' },\n    { natural: 'm', flat: 'j', sharp: 'k' },\n    { natural: ',', flat: 'k', sharp: 'l' },\n    { natural: '.', flat: 'l', sharp: ';' },\n    { natural: '/', flat: ';', sharp: \"'\" },\n  ],\n  HOME_ROW: [\n    { natural: 'a', flat: 'q', sharp: 'w' },\n    { natural: 's', flat: 'w', sharp: 'e' },\n    { natural: 'd', flat: 'e', sharp: 'r' },\n    { natural: 'f', flat: 'r', sharp: 't' },\n    { natural: 'g', flat: 't', sharp: 'y' },\n    { natural: 'h', flat: 'y', sharp: 'u' },\n    { natural: 'j', flat: 'u', sharp: 'i' },\n    { natural: 'k', flat: 'i', sharp: 'o' },\n    { natural: 'l', flat: 'o', sharp: 'p' },\n    { natural: ';', flat: 'p', sharp: '[' },\n    { natural: \"'\", flat: '[', sharp: ']' },\n  ],\n  QWERTY_ROW: [\n    { natural: 'q', flat: '1', sharp: '2' },\n    { natural: 'w', flat: '2', sharp: '3' },\n    { natural: 'e', flat: '3', sharp: '4' },\n    { natural: 'r', flat: '4', sharp: '5' },\n    { natural: 't', flat: '5', sharp: '6' },\n    { natural: 'y', flat: '6', sharp: '7' },\n    { natural: 'u', flat: '7', sharp: '8' },\n    { natural: 'i', flat: '8', sharp: '9' },\n    { natural: 'o', flat: '9', sharp: '0' },\n    { natural: 'p', flat: '0', sharp: '-' },\n    { natural: '[', flat: '-', sharp: '=' },\n  ],\n};\n"]},"metadata":{},"sourceType":"module"}