{"ast":null,"code":"import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n  return (nativeContext, options) => {\n    const nativeOscillatorNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createOscillator());\n    assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n\n    if (options.periodicWave !== undefined) {\n      nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n    } else {\n      assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n    } // Bug #44: Only Chrome & Opera throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n    } // Bug #44: Only Firefox does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n    } // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.\n\n\n    addSilentConnection(nativeContext, nativeOscillatorNode);\n    return nativeOscillatorNode;\n  };\n};","map":{"version":3,"sources":["/Users/jamescoyne/Desktop/synth-master/client/node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js"],"names":["assignNativeAudioNodeAudioParamValue","assignNativeAudioNodeOption","assignNativeAudioNodeOptions","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","createNativeOscillatorNodeFactory","addSilentConnection","cacheTestResult","createNativeAudioNode","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","nativeContext","options","nativeOscillatorNode","ntvCntxt","createOscillator","periodicWave","undefined","setPeriodicWave"],"mappings":"AAAA,SAASA,oCAAT,QAAqD,uDAArD;AACA,SAASC,2BAAT,QAA4C,4CAA5C;AACA,SAASC,4BAAT,QAA6C,6CAA7C;AACA,SAASC,yDAAT,QAA0E,8EAA1E;AACA,SAASC,wDAAT,QAAyE,6EAAzE;AACA,OAAO,MAAMC,iCAAiC,GAAG,CAACC,mBAAD,EAAsBC,eAAtB,EAAuCC,qBAAvC,EAA8DC,gEAA9D,EAAgIC,6DAAhI,EAA+LC,+DAA/L,EAAgQC,sDAAhQ,KAA2T;AACxW,SAAO,CAACC,aAAD,EAAgBC,OAAhB,KAA4B;AAC/B,UAAMC,oBAAoB,GAAGP,qBAAqB,CAACK,aAAD,EAAiBG,QAAD,IAAcA,QAAQ,CAACC,gBAAT,EAA9B,CAAlD;AACAf,IAAAA,4BAA4B,CAACa,oBAAD,EAAuBD,OAAvB,CAA5B;AACAd,IAAAA,oCAAoC,CAACe,oBAAD,EAAuBD,OAAvB,EAAgC,QAAhC,CAApC;AACAd,IAAAA,oCAAoC,CAACe,oBAAD,EAAuBD,OAAvB,EAAgC,WAAhC,CAApC;;AACA,QAAIA,OAAO,CAACI,YAAR,KAAyBC,SAA7B,EAAwC;AACpCJ,MAAAA,oBAAoB,CAACK,eAArB,CAAqCN,OAAO,CAACI,YAA7C;AACH,KAFD,MAGK;AACDjB,MAAAA,2BAA2B,CAACc,oBAAD,EAAuBD,OAAvB,EAAgC,MAAhC,CAA3B;AACH,KAV8B,CAW/B;;;AACA,QAAI,CAACP,eAAe,CAACE,gEAAD,EAAmE,MAAMA,gEAAgE,CAACI,aAAD,CAAzI,CAApB,EAA+K;AAC3KV,MAAAA,yDAAyD,CAACY,oBAAD,CAAzD;AACH,KAd8B,CAe/B;;;AACA,QAAI,CAACR,eAAe,CAACG,6DAAD,EAAgE,MAAMA,6DAA6D,CAACG,aAAD,CAAnI,CAApB,EAAyK;AACrKD,MAAAA,sDAAsD,CAACG,oBAAD,EAAuBF,aAAvB,CAAtD;AACH,KAlB8B,CAmB/B;;;AACA,QAAI,CAACN,eAAe,CAACI,+DAAD,EAAkE,MAAMA,+DAA+D,CAACE,aAAD,CAAvI,CAApB,EAA6K;AACzKT,MAAAA,wDAAwD,CAACW,oBAAD,CAAxD;AACH,KAtB8B,CAuB/B;;;AACAT,IAAAA,mBAAmB,CAACO,aAAD,EAAgBE,oBAAhB,CAAnB;AACA,WAAOA,oBAAP;AACH,GA1BD;AA2BH,CA5BM","sourcesContent":["import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options) => {\n        const nativeOscillatorNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createOscillator());\n        assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n        if (options.periodicWave !== undefined) {\n            nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n        }\n        else {\n            assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n        }\n        // Bug #44: Only Chrome & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n        }\n        // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.\n        addSilentConnection(nativeContext, nativeOscillatorNode);\n        return nativeOscillatorNode;\n    };\n};\n//# sourceMappingURL=/build/es2019/factories/native-oscillator-node-factory.js.map"]},"metadata":{},"sourceType":"module"}